<S> = <program>
<program> = <statement> <program>
<program> = <statement>
<program> = end
<statement> = <dec_stmt> ;
<statement> = <simple_assign_stmt> ;
<statement> = <arr_assign_stmt> ;
<statement> = <if_stmt>
<statement> = <while_stmt>
<statement> = <out_func_call> ;
<dec_stmt> = <type> identifier
<dec_stmt> = <type> <simple_assign_stmt>
<dec_stmt> = <type> <arr_dec_stmt>
<type> = int
<type> = string
<simple_assign_stmt> = identifier = <expression>
<arr_assign_stmt> = <arr_access> = <expression>
<arr_access> = identifier [ <positive_number> ]
<expression> = <in_func_call>
<expression> = <int_expression>
<expression> = <string_expression>
<int_expression> = int
<int_expression> = identifier
<int_expression> = arr_access
<int_expression> = <int_term> <arithmetic_operator> <int_expression>
<int_expression> = ( <int_term> <arithmetic_operator> <int_expression> )
<int_term> = int
<int_term> = identifier
<int_term> = arr_access
<positive_number> = 0
<positive_number> = <non_zero_number>
<non_zero_number> = <non_zero_digit>
<non_zero_number> = <non_zero_digit> <digit_sequence>
<digit_sequence> = constant
<digit_sequence> = constant <digit_sequence>
<arithmetic_operator> = +
<arithmetic_operator> = -
<arithmetic_operator> = %
<arithmetic_operator> = *
<arithmetic_operator> = /
<string_expression> = constant
<string_expression> = identifier
<string_expression> = <arr_access>
<arr_dec_stmt> = <simple_arr_stmt>
<arr_dec_stmt> = { <identifier_list> }
<arr_dec_stmt> = { <array_list> }
<arr_dec_stmt> = { <constant_list> }
<simple_arr_stmt> = identifier [ <non_zero_number> ]
<identifier_list> = identifier
<identifier_list> = identifier , <identifier_list>
<array_list> = <arr_access>
<array_list> = <arr_access> , <array_list>
<constant_list> = constant
<constant_list> = constant , <constant_list>
<if_stmt> = if ( <condition> ) { <statement> } else { <statement> }
<condition> = <expression> <relational_operator> <expression>
<relational_operator> = ==
<relational_operator> = !=
<while_stmt> = while ( <condition> ) { <statement> }
<in_func_call> = readInt()
<in_func_call> = readString()
<out_func_call> = print ( identifier )
<out_func_call> = print ( constant )
<out_func_call> = print ( <arr_access> )