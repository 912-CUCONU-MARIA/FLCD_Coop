{NORMAL, 0, w=[], in=[S]} expand
{NORMAL, 0, w=[S1], in=[program]} expand
{NORMAL, 0, w=[S1, program1], in=[program, statement]} expand
{NORMAL, 0, w=[S1, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 0, w=[S1, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 0, w=[S1, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} advance
{NORMAL, 1, w=[S1, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} advance
{NORMAL, 2, w=[S1, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} momentary insuccess
{BACK, 2, w=[S1, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} back
{BACK, 1, w=[S1, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} back
{BACK, 0, w=[S1, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 0, w=[S1, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 0, w=[S1, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 0, w=[S1, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 0, w=[S1, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 0, w=[S1, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} advance
{NORMAL, 1, w=[S1, program1, statement1, dec_stmt2, type1, int], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 1, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} advance
{NORMAL, 2, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier], in=[program, ;, expression, =]} advance
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =], in=[program, ;, expression]} expand
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} expand
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} another try
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} momentary insuccess
{BACK, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} another try
{BACK, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} another try
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2], in=[program, ;, int_expression]} expand
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, ;, int_term]} expand
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} another try
{NORMAL, 3, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, ;, constant]} advance
{NORMAL, 4, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant], in=[program, ;]} advance
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;], in=[program]} expand
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1], in=[program, statement]} expand
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} advance
{NORMAL, 6, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} advance
{NORMAL, 7, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} momentary insuccess
{BACK, 7, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} back
{BACK, 6, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} back
{BACK, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 5, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} advance
{NORMAL, 6, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 6, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} advance
{NORMAL, 7, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier], in=[program, ;, expression, =]} advance
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =], in=[program, ;, expression]} expand
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} expand
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} another try
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} momentary insuccess
{BACK, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} another try
{BACK, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} another try
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2], in=[program, ;, int_expression]} expand
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, ;, int_term]} expand
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} another try
{NORMAL, 8, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, ;, constant]} advance
{NORMAL, 9, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant], in=[program, ;]} advance
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;], in=[program]} expand
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1], in=[program, statement]} expand
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} advance
{NORMAL, 11, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} advance
{NORMAL, 12, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} momentary insuccess
{BACK, 12, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int, identifier], in=[program, ;]} back
{BACK, 11, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1, int], in=[program, ;, identifier]} back
{BACK, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 10, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} advance
{NORMAL, 11, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 11, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} advance
{NORMAL, 12, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier], in=[program, ;, expression, =]} advance
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =], in=[program, ;, expression]} expand
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} expand
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, ;, readInt()]} another try
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} momentary insuccess
{BACK, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, ;, readString()]} another try
{BACK, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression1], in=[program, ;, in_func_call]} another try
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2], in=[program, ;, int_expression]} expand
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, ;, int_term]} expand
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} momentary insuccess
{BACK, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, ;, readInt()]} another try
{NORMAL, 13, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, ;, constant]} advance
{NORMAL, 14, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant], in=[program, ;]} advance
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;], in=[program]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1], in=[program, statement]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1], in=[program, ;, dec_stmt]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement2], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement2], in=[program, ;, simple_assign_stmt]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3], in=[program, ;, arr_assign_stmt]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement3], in=[program, ;, arr_assign_stmt]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4], in=[program, if_stmt]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement4], in=[program, if_stmt]} another try
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5], in=[program, while_stmt]} expand
{NORMAL, 15, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1], in=[program, }, while_body, {, ), condition, (, while]} advance
{NORMAL, 16, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while], in=[program, }, while_body, {, ), condition, (]} advance
{NORMAL, 17, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (], in=[program, }, while_body, {, ), condition]} expand
{NORMAL, 17, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1], in=[program, }, while_body, {, ), expression, relational_operator, bool_term]} expand
{NORMAL, 17, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term1], in=[program, }, while_body, {, ), expression, relational_operator, constant]} momentary insuccess
{BACK, 17, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term1], in=[program, }, while_body, {, ), expression, relational_operator, constant]} another try
{NORMAL, 17, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2], in=[program, }, while_body, {, ), expression, relational_operator, identifier]} advance
{NORMAL, 18, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier], in=[program, }, while_body, {, ), expression, relational_operator]} expand
{NORMAL, 18, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator1], in=[program, }, while_body, {, ), expression, ==]} momentary insuccess
{BACK, 18, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator1], in=[program, }, while_body, {, ), expression, ==]} another try
{NORMAL, 18, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2], in=[program, }, while_body, {, ), expression, !=]} advance
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=], in=[program, }, while_body, {, ), expression]} expand
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1], in=[program, }, while_body, {, ), in_func_call]} expand
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1, in_func_call1], in=[program, }, while_body, {, ), readInt()]} momentary insuccess
{BACK, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1, in_func_call1], in=[program, }, while_body, {, ), readInt()]} another try
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1, in_func_call2], in=[program, }, while_body, {, ), readString()]} momentary insuccess
{BACK, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1, in_func_call2], in=[program, }, while_body, {, ), readString()]} another try
{BACK, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression1], in=[program, }, while_body, {, ), in_func_call]} another try
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2], in=[program, }, while_body, {, ), int_expression]} expand
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1], in=[program, }, while_body, {, ), int_term]} expand
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term1], in=[program, }, while_body, {, ), readInt()]} momentary insuccess
{BACK, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term1], in=[program, }, while_body, {, ), readInt()]} another try
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term2], in=[program, }, while_body, {, ), constant]} momentary insuccess
{BACK, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term2], in=[program, }, while_body, {, ), constant]} another try
{NORMAL, 19, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3], in=[program, }, while_body, {, ), identifier]} advance
{NORMAL, 20, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier], in=[program, }, while_body, {, )]} advance
{NORMAL, 21, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, )], in=[program, }, while_body, {]} advance
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {], in=[program, }, while_body]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1], in=[program, }, while_body, statement]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} another try
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} another try
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} another try
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} another try
{BACK, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} another try
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2], in=[program, }, while_body, ;, simple_assign_stmt]} expand
{NORMAL, 22, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1], in=[program, }, while_body, ;, expression, =, identifier]} advance
{NORMAL, 23, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier], in=[program, }, while_body, ;, expression, =]} advance
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =], in=[program, }, while_body, ;, expression]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1], in=[program, }, while_body, ;, in_func_call]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, }, while_body, ;, readInt()]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, }, while_body, ;, readInt()]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, }, while_body, ;, readString()]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, }, while_body, ;, readString()]} another try
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1], in=[program, }, while_body, ;, in_func_call]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2], in=[program, }, while_body, ;, int_expression]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, }, while_body, ;, int_term]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, }, while_body, ;, constant]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, }, while_body, ;, constant]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3], in=[program, }, while_body, ;, identifier]} advance
{NORMAL, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3, identifier], in=[program, }, while_body, ;]} momentary insuccess
{BACK, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3, identifier], in=[program, }, while_body, ;]} back
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3], in=[program, }, while_body, ;, identifier]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4], in=[program, }, while_body, ;, arr_access]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1], in=[program, }, while_body, ;, ], identifier, [, identifier]} advance
{NORMAL, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1, identifier], in=[program, }, while_body, ;, ], identifier, []} momentary insuccess
{BACK, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1, identifier], in=[program, }, while_body, ;, ], identifier, []} back
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1], in=[program, }, while_body, ;, ], identifier, [, identifier]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2], in=[program, }, while_body, ;, ], constant, [, identifier]} advance
{NORMAL, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2, identifier], in=[program, }, while_body, ;, ], constant, []} momentary insuccess
{BACK, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2, identifier], in=[program, }, while_body, ;, ], constant, []} back
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2], in=[program, }, while_body, ;, ], constant, [, identifier]} another try
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4], in=[program, }, while_body, ;, arr_access]} another try
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, }, while_body, ;, int_term]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, int_term]} expand
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term1], in=[program, }, while_body, ;, int_expression, arithmetic_operator, readInt()]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term1], in=[program, }, while_body, ;, int_expression, arithmetic_operator, readInt()]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, constant]} momentary insuccess
{BACK, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, constant]} another try
{NORMAL, 24, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3], in=[program, }, while_body, ;, int_expression, arithmetic_operator, identifier]} advance
{NORMAL, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier], in=[program, }, while_body, ;, int_expression, arithmetic_operator]} expand
{NORMAL, 25, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1], in=[program, }, while_body, ;, int_expression, +]} advance
{NORMAL, 26, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +], in=[program, }, while_body, ;, int_expression]} expand
{NORMAL, 26, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1], in=[program, }, while_body, ;, int_term]} expand
{NORMAL, 26, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} advance
{NORMAL, 27, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt()], in=[program, }, while_body, ;]} advance
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;], in=[program, }, while_body]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1], in=[program, }, while_body, statement]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} another try
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} another try
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} another try
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} another try
{BACK, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} another try
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2], in=[program, }, while_body, ;, simple_assign_stmt]} expand
{NORMAL, 28, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1], in=[program, }, while_body, ;, expression, =, identifier]} advance
{NORMAL, 29, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier], in=[program, }, while_body, ;, expression, =]} advance
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =], in=[program, }, while_body, ;, expression]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1], in=[program, }, while_body, ;, in_func_call]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, }, while_body, ;, readInt()]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call1], in=[program, }, while_body, ;, readInt()]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, }, while_body, ;, readString()]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1, in_func_call2], in=[program, }, while_body, ;, readString()]} another try
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression1], in=[program, }, while_body, ;, in_func_call]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2], in=[program, }, while_body, ;, int_expression]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, }, while_body, ;, int_term]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, }, while_body, ;, constant]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2], in=[program, }, while_body, ;, constant]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3], in=[program, }, while_body, ;, identifier]} advance
{NORMAL, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3, identifier], in=[program, }, while_body, ;]} momentary insuccess
{BACK, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3, identifier], in=[program, }, while_body, ;]} back
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term3], in=[program, }, while_body, ;, identifier]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4], in=[program, }, while_body, ;, arr_access]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1], in=[program, }, while_body, ;, ], identifier, [, identifier]} advance
{NORMAL, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1, identifier], in=[program, }, while_body, ;, ], identifier, []} momentary insuccess
{BACK, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1, identifier], in=[program, }, while_body, ;, ], identifier, []} back
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access1], in=[program, }, while_body, ;, ], identifier, [, identifier]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2], in=[program, }, while_body, ;, ], constant, [, identifier]} advance
{NORMAL, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2, identifier], in=[program, }, while_body, ;, ], constant, []} momentary insuccess
{BACK, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2, identifier], in=[program, }, while_body, ;, ], constant, []} back
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4, arr_access2], in=[program, }, while_body, ;, ], constant, [, identifier]} another try
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term4], in=[program, }, while_body, ;, arr_access]} another try
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression1], in=[program, }, while_body, ;, int_term]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, int_term]} expand
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term1], in=[program, }, while_body, ;, int_expression, arithmetic_operator, readInt()]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term1], in=[program, }, while_body, ;, int_expression, arithmetic_operator, readInt()]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, constant]} momentary insuccess
{BACK, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term2], in=[program, }, while_body, ;, int_expression, arithmetic_operator, constant]} another try
{NORMAL, 30, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3], in=[program, }, while_body, ;, int_expression, arithmetic_operator, identifier]} advance
{NORMAL, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier], in=[program, }, while_body, ;, int_expression, arithmetic_operator]} expand
{NORMAL, 31, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1], in=[program, }, while_body, ;, int_expression, +]} advance
{NORMAL, 32, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +], in=[program, }, while_body, ;, int_expression]} expand
{NORMAL, 32, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1], in=[program, }, while_body, ;, int_term]} expand
{NORMAL, 32, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} momentary insuccess
{BACK, 32, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1], in=[program, }, while_body, ;, readInt()]} another try
{NORMAL, 32, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2], in=[program, }, while_body, ;, constant]} advance
{NORMAL, 33, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant], in=[program, }, while_body, ;]} advance
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;], in=[program, }, while_body]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1], in=[program, }, while_body, statement]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1, type1], in=[program, }, while_body, ;, identifier, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1, type2], in=[program, }, while_body, ;, identifier, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt1], in=[program, }, while_body, ;, identifier, type]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2, type1], in=[program, }, while_body, ;, simple_assign_stmt, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2, type2], in=[program, }, while_body, ;, simple_assign_stmt, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt2], in=[program, }, while_body, ;, simple_assign_stmt, type]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3, type1], in=[program, }, while_body, ;, arr_dec_stmt, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3, type2], in=[program, }, while_body, ;, arr_dec_stmt, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1, dec_stmt3], in=[program, }, while_body, ;, arr_dec_stmt, type]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement1], in=[program, }, while_body, ;, dec_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement2], in=[program, }, while_body, ;, simple_assign_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement2, simple_assign_stmt1], in=[program, }, while_body, ;, expression, =, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement2, simple_assign_stmt1], in=[program, }, while_body, ;, expression, =, identifier]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement2], in=[program, }, while_body, ;, simple_assign_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3], in=[program, }, while_body, ;, arr_assign_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1], in=[program, }, while_body, ;, expression, =, arr_access]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1, arr_access1], in=[program, }, while_body, ;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1, arr_access1], in=[program, }, while_body, ;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1, arr_access2], in=[program, }, while_body, ;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1, arr_access2], in=[program, }, while_body, ;, expression, =, ], constant, [, identifier]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3, arr_assign_stmt1], in=[program, }, while_body, ;, expression, =, arr_access]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement3], in=[program, }, while_body, ;, arr_assign_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4], in=[program, }, while_body, if_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4, if_stmt1], in=[program, }, while_body, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4, if_stmt1], in=[program, }, while_body, }, if_body, {, ), condition, (, if]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4, if_stmt2], in=[program, }, while_body, }, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4, if_stmt2], in=[program, }, while_body, }, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement4], in=[program, }, while_body, if_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement5], in=[program, }, while_body, while_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement5, while_stmt1], in=[program, }, while_body, }, while_body, {, ), condition, (, while]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement5, while_stmt1], in=[program, }, while_body, }, while_body, {, ), condition, (, while]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement5], in=[program, }, while_body, while_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6], in=[program, }, while_body, ;, out_func_call]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call1], in=[program, }, while_body, ;, ), identifier, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call1], in=[program, }, while_body, ;, ), identifier, (, print]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call2], in=[program, }, while_body, ;, ), constant, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call2], in=[program, }, while_body, ;, ), constant, (, print]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call3], in=[program, }, while_body, ;, ), arr_access, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6, out_func_call3], in=[program, }, while_body, ;, ), arr_access, (, print]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1, statement6], in=[program, }, while_body, ;, out_func_call]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body1], in=[program, }, while_body, statement]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2], in=[program, }, statement]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1], in=[program, }, ;, dec_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1], in=[program, }, ;, identifier, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1, type1], in=[program, }, ;, identifier, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1, type1], in=[program, }, ;, identifier, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1, type2], in=[program, }, ;, identifier, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1, type2], in=[program, }, ;, identifier, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt1], in=[program, }, ;, identifier, type]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2], in=[program, }, ;, simple_assign_stmt, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2, type1], in=[program, }, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2, type1], in=[program, }, ;, simple_assign_stmt, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2, type2], in=[program, }, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2, type2], in=[program, }, ;, simple_assign_stmt, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt2], in=[program, }, ;, simple_assign_stmt, type]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3], in=[program, }, ;, arr_dec_stmt, type]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3, type1], in=[program, }, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3, type1], in=[program, }, ;, arr_dec_stmt, int]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3, type2], in=[program, }, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3, type2], in=[program, }, ;, arr_dec_stmt, string]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1, dec_stmt3], in=[program, }, ;, arr_dec_stmt, type]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement1], in=[program, }, ;, dec_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement2], in=[program, }, ;, simple_assign_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement2, simple_assign_stmt1], in=[program, }, ;, expression, =, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement2, simple_assign_stmt1], in=[program, }, ;, expression, =, identifier]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement2], in=[program, }, ;, simple_assign_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3], in=[program, }, ;, arr_assign_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1], in=[program, }, ;, expression, =, arr_access]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1, arr_access1], in=[program, }, ;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1, arr_access1], in=[program, }, ;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1, arr_access2], in=[program, }, ;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1, arr_access2], in=[program, }, ;, expression, =, ], constant, [, identifier]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3, arr_assign_stmt1], in=[program, }, ;, expression, =, arr_access]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement3], in=[program, }, ;, arr_assign_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4], in=[program, }, if_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4, if_stmt1], in=[program, }, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4, if_stmt1], in=[program, }, }, if_body, {, ), condition, (, if]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4, if_stmt2], in=[program, }, }, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4, if_stmt2], in=[program, }, }, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement4], in=[program, }, if_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement5], in=[program, }, while_stmt]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement5, while_stmt1], in=[program, }, }, while_body, {, ), condition, (, while]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement5, while_stmt1], in=[program, }, }, while_body, {, ), condition, (, while]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement5], in=[program, }, while_stmt]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6], in=[program, }, ;, out_func_call]} expand
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call1], in=[program, }, ;, ), identifier, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call1], in=[program, }, ;, ), identifier, (, print]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call2], in=[program, }, ;, ), constant, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call2], in=[program, }, ;, ), constant, (, print]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call3], in=[program, }, ;, ), arr_access, (, print]} momentary insuccess
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6, out_func_call3], in=[program, }, ;, ), arr_access, (, print]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2, statement6], in=[program, }, ;, out_func_call]} another try
{BACK, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body2], in=[program, }, statement]} another try
{NORMAL, 34, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3], in=[program, }, end_while]} advance
{NORMAL, 35, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while], in=[program, }]} advance
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }], in=[program]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1], in=[program, statement]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement1], in=[program, ;, dec_stmt]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement2], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement2], in=[program, ;, simple_assign_stmt]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3], in=[program, ;, arr_assign_stmt]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement3], in=[program, ;, arr_assign_stmt]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4], in=[program, if_stmt]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement4], in=[program, if_stmt]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement5], in=[program, while_stmt]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement5, while_stmt1], in=[program, }, while_body, {, ), condition, (, while]} momentary insuccess
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement5, while_stmt1], in=[program, }, while_body, {, ), condition, (, while]} another try
{BACK, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement5], in=[program, while_stmt]} another try
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6], in=[program, ;, out_func_call]} expand
{NORMAL, 36, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1], in=[program, ;, ), identifier, (, print]} advance
{NORMAL, 37, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print], in=[program, ;, ), identifier, (]} advance
{NORMAL, 38, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (], in=[program, ;, ), identifier]} advance
{NORMAL, 39, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier], in=[program, ;, )]} advance
{NORMAL, 40, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, )], in=[program, ;]} advance
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;], in=[program]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1], in=[program, statement]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1], in=[program, ;, dec_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1, type1], in=[program, ;, identifier, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1, type2], in=[program, ;, identifier, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt1], in=[program, ;, identifier, type]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2, type1], in=[program, ;, simple_assign_stmt, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2, type2], in=[program, ;, simple_assign_stmt, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt2], in=[program, ;, simple_assign_stmt, type]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3, type1], in=[program, ;, arr_dec_stmt, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3, type2], in=[program, ;, arr_dec_stmt, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1, dec_stmt3], in=[program, ;, arr_dec_stmt, type]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement1], in=[program, ;, dec_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement2], in=[program, ;, simple_assign_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement2, simple_assign_stmt1], in=[program, ;, expression, =, identifier]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement2], in=[program, ;, simple_assign_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3], in=[program, ;, arr_assign_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1, arr_access1], in=[program, ;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1, arr_access2], in=[program, ;, expression, =, ], constant, [, identifier]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3, arr_assign_stmt1], in=[program, ;, expression, =, arr_access]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement3], in=[program, ;, arr_assign_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4], in=[program, if_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4, if_stmt1], in=[program, }, if_body, {, ), condition, (, if]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4, if_stmt2], in=[program, }, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement4], in=[program, if_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement5], in=[program, while_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement5, while_stmt1], in=[program, }, while_body, {, ), condition, (, while]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement5, while_stmt1], in=[program, }, while_body, {, ), condition, (, while]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement5], in=[program, while_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6], in=[program, ;, out_func_call]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call1], in=[program, ;, ), identifier, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call1], in=[program, ;, ), identifier, (, print]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call2], in=[program, ;, ), constant, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call2], in=[program, ;, ), constant, (, print]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call3], in=[program, ;, ), arr_access, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6, out_func_call3], in=[program, ;, ), arr_access, (, print]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1, statement6], in=[program, ;, out_func_call]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program1], in=[program, statement]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2], in=[statement]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1], in=[;, dec_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1], in=[;, identifier, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1, type1], in=[;, identifier, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1, type1], in=[;, identifier, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1, type2], in=[;, identifier, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1, type2], in=[;, identifier, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt1], in=[;, identifier, type]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2], in=[;, simple_assign_stmt, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2, type1], in=[;, simple_assign_stmt, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2, type1], in=[;, simple_assign_stmt, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2, type2], in=[;, simple_assign_stmt, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2, type2], in=[;, simple_assign_stmt, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt2], in=[;, simple_assign_stmt, type]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3], in=[;, arr_dec_stmt, type]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3, type1], in=[;, arr_dec_stmt, int]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3, type1], in=[;, arr_dec_stmt, int]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3, type2], in=[;, arr_dec_stmt, string]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3, type2], in=[;, arr_dec_stmt, string]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1, dec_stmt3], in=[;, arr_dec_stmt, type]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement1], in=[;, dec_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement2], in=[;, simple_assign_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement2, simple_assign_stmt1], in=[;, expression, =, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement2, simple_assign_stmt1], in=[;, expression, =, identifier]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement2], in=[;, simple_assign_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3], in=[;, arr_assign_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1], in=[;, expression, =, arr_access]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1, arr_access1], in=[;, expression, =, ], identifier, [, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1, arr_access1], in=[;, expression, =, ], identifier, [, identifier]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1, arr_access2], in=[;, expression, =, ], constant, [, identifier]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1, arr_access2], in=[;, expression, =, ], constant, [, identifier]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3, arr_assign_stmt1], in=[;, expression, =, arr_access]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement3], in=[;, arr_assign_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4], in=[if_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4, if_stmt1], in=[}, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4, if_stmt1], in=[}, if_body, {, ), condition, (, if]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4, if_stmt2], in=[}, if_body, {, else, }, if_body, {, ), condition, (, if]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4, if_stmt2], in=[}, if_body, {, else, }, if_body, {, ), condition, (, if]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement4], in=[if_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement5], in=[while_stmt]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement5, while_stmt1], in=[}, while_body, {, ), condition, (, while]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement5, while_stmt1], in=[}, while_body, {, ), condition, (, while]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement5], in=[while_stmt]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6], in=[;, out_func_call]} expand
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call1], in=[;, ), identifier, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call1], in=[;, ), identifier, (, print]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call2], in=[;, ), constant, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call2], in=[;, ), constant, (, print]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call3], in=[;, ), arr_access, (, print]} momentary insuccess
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6, out_func_call3], in=[;, ), arr_access, (, print]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2, statement6], in=[;, out_func_call]} another try
{BACK, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program2], in=[statement]} another try
{NORMAL, 41, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program3], in=[end]} advance
{NORMAL, 42, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program3, end], in=[]} success
{FINAL, 42, w=[S1, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement1, dec_stmt2, type1, int, simple_assign_stmt1, identifier, =, expression2, int_expression1, int_term2, constant, ;, program1, statement5, while_stmt1, while, (, condition1, bool_term2, identifier, relational_operator2, !=, expression2, int_expression1, int_term3, identifier, ), {, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term1, readInt(), ;, while_body1, statement2, simple_assign_stmt1, identifier, =, expression2, int_expression2, int_term3, identifier, arithmetic_operator1, +, int_expression1, int_term2, constant, ;, while_body3, end_while, }, program1, statement6, out_func_call1, print, (, identifier, ), ;, program3, end], in=[]} 